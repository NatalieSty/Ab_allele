import pandas as pd
import sys


def main(foldx_output_dir):

    amino_acid_name_to_abbreviation = {'CYS': 'C', 'ASP': 'D', 'SER': 'S', 'GLN': 'Q', 'LYS': 'K',
     'ILE': 'I', 'PRO': 'P', 'THR': 'T', 'PHE': 'F', 'ASN': 'N',
     'GLY': 'G', 'HIS': 'H', 'LEU': 'L', 'ARG': 'R', 'TRP': 'W',
     'ALA': 'A', 'VAL':'V', 'GLU': 'E', 'TYR': 'Y', 'MET': 'M', 'o': 'H', 'e': 'H', 'f': 'H',
                                       'H1S': 'H', 'H2S': 'H', 'H3S': 'H'}

    filtered_df = pd.read_csv('results/epitope_identification_with_baseline_variation.csv')

    # go through the files generated by foldx
    # dir = '/Users/natalieso/Downloads/part_3_remote/'
    dir = foldx_output_dir

    pdb_list = filtered_df['pdb_id'].unique()

    part_2_results = pd.read_csv(
        'results/epitope_identification_with_baseline_variation.csv', index_col=[0])
    error = []
    for pdb in pdb_list:
        original_dict = dict()

        filename = 'PS_'+pdb.lower()+'_scanning_output.txt'
        try:
            file1 = open(dir+filename, 'r')
        except:
            error.append(pdb)

        Lines = file1.readlines()

        for line in Lines:
            if not line:
                continue
            name, val = line.split('\t')
            original = name[:3]
            chain = name[3:4]
            target = name[-1]
            loc_str = ''
            name_with_origin = name[3:]
            for c in name_with_origin:
                if c.isdigit():
                    loc_str += c
            original_abbreviation = amino_acid_name_to_abbreviation[original]
            target = target if target not in amino_acid_name_to_abbreviation else amino_acid_name_to_abbreviation[target]

            if original_abbreviation == target:
                original_dict[(original_abbreviation, loc_str, target)] = float(val.strip())
                continue

            subtraction = float(val.strip()) - original_dict[(original_abbreviation, loc_str, original_abbreviation)]
            if 'nan' in val:
                subtraction = val
            part_2_results.loc[(part_2_results['pdb_id'] == pdb) & (part_2_results['chain_id'] == chain)
                                              & (part_2_results['dssp_location'] == loc_str) &
                                              (part_2_results['amino_acid_original'] == original_abbreviation) &
                               (part_2_results['variants'] == target), 'DDG_antibody'] = subtraction

        empty_ddg_rows = part_2_results.loc[pd.isnull(part_2_results['DDG_antibody']) | (part_2_results['DDG_antibody'] == ''), :]

        empty_ddg_rows.to_csv('empty_ddg_rows.csv')

        part_2_results = part_2_results[['pdb_id', 'chain_id', 'location', 'dssp_location', 'gene','amino_acid_original',
                                         'list_amino_acid_variants', 'variants', 'baseline_freq_original','description',
                                         'antigen_name', 'antigen_chain', 'antigen_species','resolution', 'DDG', 'DDG_antibody',
                                         'antigen_loc_list','antigen_species_id', 'groupID']]

        part_2_results['groupID'] = part_2_results['groupID'].astype(
            str).apply(lambda x: x.replace('.0', ''))
        part_2_results['groupID'] = part_2_results['groupID'].astype(
            str).apply(lambda x: x.replace('nan', ''))
        part_2_results.to_csv('results/epitope_identification_with_antibody_only_ddgs.csv')

    print('error', error)

if __name__ == "__main__":
    foldx_output_dir = sys.argv[1]
    main(foldx_output_dir)