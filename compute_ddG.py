import pandas as pd
import sys
def get_filtered_target_grouped():
    filtered_df = pd.read_csv('results/allelic_variant_at_paratope/allelic_variant_at_paratope_result_targets_df.csv')

    filtered_df = filtered_df.groupby('pdb_id')['target'].apply(lambda x: ''.join(x)).reset_index()
    filtered_df.to_csv('results/allelic_variant_at_paratope/allelic_variant_at_paratope_filtered_df_grouped.csv')

    return filtered_df

def main(foldx_output_dir):
    filtered_df = get_filtered_target_grouped()

    amino_acid_name_to_abbreviation = {'CYS': 'C', 'ASP': 'D', 'SER': 'S', 'GLN': 'Q', 'LYS': 'K',
     'ILE': 'I', 'PRO': 'P', 'THR': 'T', 'PHE': 'F', 'ASN': 'N',
     'GLY': 'G', 'HIS': 'H', 'LEU': 'L', 'ARG': 'R', 'TRP': 'W',
     'ALA': 'A', 'VAL':'V', 'GLU': 'E', 'TYR': 'Y', 'MET': 'M', 'o': 'H', 'e': 'H', 'f': 'H',
                                       'H1S': 'H', 'H2S': 'H', 'H3S': 'H'}

    filtered_df = pd.read_csv('results/allelic_variant_at_paratope/allelic_variant_at_paratope_filtered_df_grouped.csv')

    # go through the files generated by foldx
    # dir = '/Users/natalieso/Downloads/part_3_remote/'
    dir = foldx_output_dir

    pdb_list = filtered_df['pdb_id'].unique()

    part_2_results = pd.read_csv(
        'results/allelic_variant_at_paratope/allelic_variant_at_paratope_result_splitted_df.csv', index_col=[0])
    error = []
    for pdb in pdb_list:
        original_dict = dict()
        filename = 'PS_'+pdb.lower()+'_scanning_output.txt'
        try:
            file1 = open(dir+filename, 'r')
        except:
            error.append(pdb)
        Lines = file1.readlines()

        for line in Lines:
            if not line:
                continue
            name, val = line.split('\t')
            original = name[:3]
            chain = name[3:4]
            target = name[-1]
            loc_str = ''
            name_with_origin = name[3:]
            for c in name_with_origin:
                if c.isdigit():
                    loc_str += c
            original_abbreviation = amino_acid_name_to_abbreviation[original]
            target = target if target not in amino_acid_name_to_abbreviation else amino_acid_name_to_abbreviation[target]

            if original_abbreviation == target:
                original_dict[(original_abbreviation, loc_str, target)] = float(val.strip())
                continue

            subtraction = float(val.strip()) - original_dict[(original_abbreviation, loc_str, original_abbreviation)]
            if 'nan' in val:
                subtraction = val

            part_2_results.loc[(part_2_results['pdb_id'] == pdb) & (part_2_results['chain_id'] == chain)
                                              & (part_2_results['dssp_location'] == loc_str) &
                                              (part_2_results['amino_acid_original'] == original_abbreviation) &
                               (part_2_results['variants'] == target), 'DDG'] = subtraction

        empty_ddg_rows = part_2_results.loc[pd.isnull(part_2_results['DDG']) | (part_2_results['DDG'] == ''), :]

        empty_ddg_rows.to_csv('empty_ddg_rows.csv')

        part_2_results.to_csv('FoldX.csv')
    print('error', error)

if __name__ == "__main__":
    foldx_output_dir = sys.argv[1]
    main(foldx_output_dir)